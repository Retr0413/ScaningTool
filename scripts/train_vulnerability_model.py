import os
import torch
from torch.utils.data import DataLoader, TensorDataset
from models.vulnerability_model import VulnerabilityModel
import numpy as np

# GPUの使用確認
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# データの読み込み（CSV形式からNumpyに変換）
X_train = np.genfromtxt('data/processed/vuln_X_train.csv', delimiter=',', skip_header=1)
y_train = np.genfromtxt('data/processed/vuln_y_train.csv', delimiter=',', skip_header=1)

# Tensorに変換
X_train_tensor = torch.tensor(X_train, dtype=torch.float32).to(device)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1).to(device)

# DataLoaderの作成
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# モデルの構築
input_size = X_train.shape[1]
model = VulnerabilityModel(input_size).to(device)

# 損失関数と最適化手法
criterion = torch.nn.BCELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# 学習ループ
for epoch in range(10):
    model.train()
    for X_batch, y_batch in train_loader:
        optimizer.zero_grad()
        predictions = model(X_batch)
        loss = criterion(predictions, y_batch)
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch+1}, Loss: {loss.item()}')

# 保存ディレクトリを確認・作成
model_dir = 'models'
os.makedirs(model_dir, exist_ok=True)  

# モデルの保存
model_path = os.path.join(model_dir, 'vulnerability_model.pth')
torch.save(model.state_dict(), model_path)

print(f"Model saved at: {model_path}")
